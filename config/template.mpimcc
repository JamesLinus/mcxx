#!/bin/bash
USER_FLAGS=" $* "
ORIGINAL_MCC_COMPILER=mpimcc
ORIGINAL_MPI_COMPILER=@MPICC@
ORIGINAL_CXX_MPI_COMPILER=@MPICXX@
EXTRA_MCC_FLAGS=""
#Find which compilers should we use
if [[ ! -z "$OFFL_CXX" ]]; then
    ORIGINAL_CXX_MPI_COMPILER=$OFFL_CXX
else
if which mpiicpc >/dev/null 2>&1; then
    ORIGINAL_CXX_MPI_COMPILER=mpiicpc
elif which mpicxx >/dev/null 2>&1; 
then
    ORIGINAL_CXX_MPI_COMPILER=mpicxx
else
    echo "mpiicpc or mpicxx not found in your system and OFFL_CXX env variable not set, they are required in order to offload"
fi
fi

if [[ ! -z "$OFFL_CC" ]]; then
    ORIGINAL_MPI_COMPILER=$OFFL_CC
else
if which mpiicc >/dev/null 2>&1; then
    ORIGINAL_MPI_COMPILER=mpiicc
elif which mpicc >/dev/null 2>&1; 
then
    ORIGINAL_MPI_COMPILER=mpicc
else
    echo "mpicc or mpiicc not found in your system  and OFFL_CC env variable not set"
fi
fi

#if starts with g* it's GNU
if [[ `$ORIGINAL_MPI_COMPILER -show` == *@GCC@* ]] 
then
    ORIGINAL_MCC_COMPILER="${ORIGINAL_MCC_COMPILER}_mcc"
else
    ORIGINAL_MCC_COMPILER="${ORIGINAL_MCC_COMPILER}_imcc"
fi
#Extra flags for intel MPI (pretty hackish)
if [[ `$ORIGINAL_MPI_COMPILER -help` == *I_MPI* ]] 
then
   MPI_PLUGIN_FLAGS="$MPI_PLUGIN_FLAGS -mt_mpi"
   EXTRA_MCC_FLAGS="$EXTRA_MCC_FLAGS -mt_mpi"
fi

NANOX_INSTALL=@NANOX@/
#Setup flags for MIC
ORIGINAL_MCC_COMPILER="${ORIGINAL_MCC_COMPILER}_base"

ORIGINAL_MCC_COMPILER="plaincxx --profile=${ORIGINAL_MCC_COMPILER} --cpp=$ORIGINAL_MPI_COMPILER --cxx=$ORIGINAL_MPI_COMPILER --ld=$ORIGINAL_MPI_COMPILER" 
if [[ "$USER_FLAGS" == *--mmic* ]] 
then
   MPI_PLUGIN_FLAGS="$MPI_PLUGIN_FLAGS -mmic"
   NANOX_INSTALL=@NANOX_MIC@/
fi

#Call the native mercurim compiler and recompile Offload plugin whenever needed
OLDPPWD=$PWD
if [[ "$USER_FLAGS" == *\ -c\ * ]]
then
	${ORIGINAL_MCC_COMPILER} $USER_FLAGS
elif [ $# -eq 0 ]
then
	${ORIGINAL_MCC_COMPILER} $USER_FLAGS
   echo "This Offload compiler uses internally $ORIGINAL_MPI_COMPILER from your current PATH, if you want to change compiler, use OFFL_CC and OFFL_CXX env variables (both have to be pointing to the same MPI implementation)
         or remove $ORIGINAL_MPI_COMPILER from your PATH"
elif [[ "$USER_FLAGS" == *-help\ * ]]
then
	${ORIGINAL_MCC_COMPILER} $USER_FLAGS
   echo "This Offload compiler uses internally $ORIGINAL_MPI_COMPILER from your current PATH, if you want to change compiler, use OFFL_CC and OFFL_CXX env variables (both have to be pointing to the same MPI implementation)
         or remove $ORIGINAL_MPI_COMPILER from your PATH"
   echo "General guidelines about Offloading can be found in http://pm.bsc.es/ompss-docs/user-guide/run-programs-archs-offload.html"
elif [[ "$USER_FLAGS" == *-showme:* ]]
then
   echo "Showme is not supported. Offload will not work if this wrapper is not used"
elif [[ "$USER_FLAGS" == *-show\ * ]]
then
   echo "Show is not supported. Offload will not work if this wrapper is not used"
else
   #remove possible remainders from previous compilations
   rm -f $OLDPPWD/temporaloffloadplugin*.o > /dev/null 2>&1
	type=performance
	if [[ "$USER_FLAGS" == *--instrument\ * ]]
	then
		type=instrumentation
	fi
	if [[ "$USER_FLAGS" == *--debug\ * ]]
	then
		type=debug
	fi
	if [[ "$USER_FLAGS" == *--instrumentation*--debug* ]]
	then
		type=instrumentation_debug
	fi
	if [[ "$USER_FLAGS" == *--debug*--instrumentation* ]]
	then
		type=instrumentation_debug
	fi
	MPI_PLUGIN_FLAGS_FILE=`cat $NANOX_INSTALL/src/arch/mpi/${type}_flags`
	MPI_PLUGIN_FLAGS="$MPI_PLUGIN_FLAGS_FILE $MPI_PLUGIN_FLAGS"
	ORIGINAL_NANOX_COMPILER="`cat $NANOX_INSTALL/src/arch/mpi/nanox_compiler`"
   trap "rm -f $OLDPPWD/temporaloffloadplugin$$.o" EXIT
   if which $ORIGINAL_NANOX_COMPILER >/dev/null 2>&1; then	
     I_MPI_CXX=$ORIGINAL_NANOX_COMPILER OMPI_CXX=$ORIGINAL_NANOX_COMPILER MPICH_CXX=$ORIGINAL_NANOX_COMPILER $ORIGINAL_CXX_MPI_COMPILER -c $NANOX_INSTALL/src/arch/mpi/mpiall.cpp $MPI_PLUGIN_FLAGS -o $OLDPPWD/temporaloffloadplugin$$.o >/dev/null 2>&1	
   else
     $ORIGINAL_CXX_MPI_COMPILER -c $NANOX_INSTALL/src/arch/mpi/mpiall.cpp $MPI_PLUGIN_FLAGS -o $OLDPPWD/temporaloffloadplugin$$.o >/dev/null 2>&1
   fi
   if [[ ! -f $OLDPPWD/temporaloffloadplugin$$.o ]] ;
   then 
       echo "Compiling OmpSs MPI Offload library"
       echo $ORIGINAL_CXX_MPI_COMPILER -c $NANOX_INSTALL/src/arch/mpi/mpiall.cpp $MPI_PLUGIN_FLAGS -o $OLDPPWD/temporaloffloadplugin$$.o
       if which $ORIGINAL_NANOX_COMPILER >/dev/null 2>&1; then	
         I_MPI_CXX=$ORIGINAL_NANOX_COMPILER OMPI_CXX=$ORIGINAL_NANOX_COMPILER MPICH_CXX=$ORIGINAL_NANOX_COMPILER $ORIGINAL_CXX_MPI_COMPILER -c $NANOX_INSTALL/src/arch/mpi/mpiall.cpp $MPI_PLUGIN_FLAGS -o $OLDPPWD/temporaloffloadplugin$$.o	
       else
         $ORIGINAL_CXX_MPI_COMPILER -c $NANOX_INSTALL/src/arch/mpi/mpiall.cpp $MPI_PLUGIN_FLAGS -o $OLDPPWD/temporaloffloadplugin$$.o	
       fi
       echo "OmpSs MPI Offload library could not be compiled. Try to solve the problem if its related to your environment. If its not a problem from your environment, plase submit a ticket to https://pm.bsc.es/projects/nanox/newticket"
       exit -1
   fi
	${ORIGINAL_MCC_COMPILER} $EXTRA_MCC_FLAGS $OLDPPWD/temporaloffloadplugin$$.o $USER_FLAGS
	rm -f $OLDPPWD/temporaloffloadplugin$$.o
fi