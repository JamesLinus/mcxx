# IBM XL
[xlmcc : omp-base-ibm]
language = C
options = -qlanglvl=extc99
options = --vector-flavor=altivec
options = --xl-compat
preprocessor_name = @XLC@
preprocessor_uses_stdout = yes
# Hide annoying messages produced when XL finds a Nanos++ pragma
preprocessor_options = -qsuppress=1506-224
compiler_name = @XLC@
linker_name = @XLC@
#cuda
{@ENABLE_CUDA@} options = --cuda
{@NANOX_GATE@,@ENABLE_CUDA@,openmp} preprocessor_options = -D__CUDABE__ -I@CUDA_INCLUDES@ -include nanos-gpu.h
{@NANOX_GATE@,@ENABLE_CUDA@,openmp} linker_options = -lnanox-gpu-api
{@NANOX_GATE@,@ENABLE_CUDA@,openmp} compiler_phase = libtlnanox-cuda.so
#opencl
{@ENABLE_OPENCL@} options = --opencl
{@NANOX_GATE@,@ENABLE_OPENCL@,openmp} preprocessor_options = -include nanos-opencl.h -D_MERCURIUM_OPENCL_
{@NANOX_GATE@,@ENABLE_OPENCL@,openmp} compiler_phase = libtlnanox-opencl.so
{@NANOX_GATE@,@ENABLE_OPENCL@,openmp} linker_options = -lnanox-opencl-api

[xlmcxx : omp-base-ibm]
language = C++
{openmp} preprocessor_options = -qinclude=new
options = --vector-flavor=altivec
options = --xl-compat

preprocessor_name = @XLCXX@
preprocessor_uses_stdout = yes
compiler_name = @XLCXX@
linker_name = @XLCXX@
#cuda
{@ENABLE_CUDA@} options = --cuda
{@NANOX_GATE@,@ENABLE_CUDA@,openmp} preprocessor_options = -D__CUDABE__ -I@CUDA_INCLUDES@ -qinclude=nanos-gpu.h
{@NANOX_GATE@,@ENABLE_CUDA@,openmp} linker_options = -lnanox-gpu-api
{@NANOX_GATE@,@ENABLE_CUDA@,openmp} compiler_phase = libtlnanox-cuda.so
#opencl
{@ENABLE_OPENCL@} options = --opencl
{@NANOX_GATE@,@ENABLE_OPENCL@,openmp} preprocessor_options = -qinclude=nanos-opencl.h -D_MERCURIUM_OPENCL_
{@NANOX_GATE@,@ENABLE_OPENCL@,openmp} compiler_phase = libtlnanox-opencl.so
{@NANOX_GATE@,@ENABLE_OPENCL@,openmp} linker_options = -lnanox-opencl-api

# IBM XL
[xlmfc : omp-base]
language = Fortran
options = -I @PKGDATADIR@/fortran/openmp --fortran-array-descriptor=xlf
# XL Fortran does not allow using LOC for functions
# instead generate C-wrappers for this
options = --variable=emit_fun_loc:1
# IBM provides its own Fortran preprocessor but there is no way to make xlf only
# preprocess a Fortran file, so lets use gfortran
fortran_preprocessor_name = @GFORTRAN@
fortran_preprocessor_options = -cpp -E
compiler_name = @XLF@
# XL Fortran does not append _ to function names by default. It should, though.
compiler_options = -qextname -qxlf2003=autorealloc
linker_name = @XLF@
linker_options =

[xlmf95 : xlmfc]
