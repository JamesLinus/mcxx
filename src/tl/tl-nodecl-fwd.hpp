/* Autogenerated file. DO NOT MODIFY. */
/* Changes in nodecl-generator.py or cxx-nodecl.def will overwrite this file */
#ifndef TL_NODECL_FWD_HPP
#define TL_NODECL_FWD_HPP

#include "tl-nodecl-base-fwd.hpp"

namespace Nodecl {
class Conversion;
class ShrAssignment;
class AnyList;
class ArraySubscript;
class ExpressionStatement;
class PragmaCustomDirective;
class Predecrement;
class TopLevel;
class FortranDeallocateStatement;
class PragmaCustomStatement;
class StructuredValue;
class PragmaClauseArg;
class ParSynchronizable;
class CxxAlignof;
class CxxDepGlobalNameNested;
class CxxExplicitTypeCast;
class IfElseStatement;
class BreakStatement;
class LogicalAnd;
class IndexDesignator;
class ParDepInput;
class PragmaCustomLine;
class FieldDesignator;
class Mod;
class FloatingLiteral;
class ModAssignment;
class CxxArraySectionSize;
class ObjectInit;
class Postdecrement;
class Offsetof;
class RealPart;
class Shl;
class Minus;
class ParAsyncCall;
class Reference;
class Add;
class BitwiseNot;
class FortranWriteStatement;
class CxxArrowPtrMember;
class EmptyStatement;
class ReturnStatement;
class ParCondition;
class CxxDepNameSimple;
class CxxParenthesizedInitializer;
class CxxPostfixInitializer;
class Neg;
class PragmaContext;
class MulAssignment;
class New;
class DefaultStatement;
class Type;
class FortranWhere;
class PseudoDestructorName;
class ParDepOutput;
class BitwiseAnd;
class FortranNullifyStatement;
class ParAsyncCode;
class CxxSizeof;
class ErrExpr;
class GotoStatement;
class Throw;
class ParComposite;
class C99DesignatedInitializer;
class TryBlock;
class ClassMemberAccess;
class VirtualFunctionCall;
class Derreference;
class CxxMemberInit;
class CxxEqualInitializer;
class Range;
class FortranImpliedDo;
class LowerOrEqualThan;
class Delete;
class CudaKernelCall;
class ShlAssignment;
class BitwiseOr;
class FortranData;
class PragmaCustomClause;
class FunctionCall;
class ParDistributeRange;
class Assignment;
class BitwiseXor;
class C99FieldDesignator;
class CxxBracedInitializer;
class FortranArithmeticIfStatement;
class ParenthesizedExpression;
class FortranStopStatement;
class SwitchStatement;
class CxxDepNameConversion;
class Preincrement;
class FortranAllocateStatement;
class BitwiseXorAssignment;
class PointerToMember;
class LoopControl;
class ParDistribute;
class ParReplicated;
class ForStatement;
class ParCapture;
class ContinueStatement;
class FortranCloseStatement;
class Symbol;
class CompoundStatement;
class Postincrement;
class ParFlushMemory;
class ParReduction;
class Offset;
class BuiltinDecl;
class Shaping;
class CaseStatement;
class Typeid;
class Div;
class DoStatement;
class LowerThan;
class CxxDepNameNested;
class BooleanLiteral;
class FunctionCode;
class FortranLabelAssignStatement;
class FortranPrintStatement;
class FortranEquivalence;
class IntegerLiteral;
class FortranReadStatement;
class ConditionalExpression;
class LogicalOr;
class Text;
class CxxDepTemplateId;
class WhileStatement;
class StringLiteral;
class FortranIoSpec;
class CompoundExpression;
class GreaterThan;
class Concat;
class ParBarrier;
class Different;
class ImagPart;
class Mul;
class DivAssignment;
class LabeledStatement;
class Shr;
class CxxArraySectionRange;
class FortranWherePair;
class FortranAssignedGotoStatement;
class ComplexLiteral;
class ParSequentialCode;
class FortranNamedPairSpec;
class Power;
class Alignof;
class SubAssignment;
class FortranAltReturn;
class BuiltinExpr;
class CxxDotPtrMember;
class ParPrivate;
class FortranIoStatement;
class FortranOpenStatement;
class FortranComputedGotoStatement;
class GreaterOrEqualThan;
class Equal;
class Cast;
class C99IndexDesignator;
class FortranForall;
class Context;
class ParShared;
class ParAtomic;
class ParAsyncWait;
class BitwiseOrAssignment;
class ParReductionItem;
class BitwiseAndAssignment;
class CatchHandler;
class PragmaCustomDeclaration;
class LogicalNot;
class ParDepInout;
class MemberInit;
class AddAssignment;
class Comma;
class CxxArrow;
class Plus;
class Sizeof;
class DeleteArray;

} // Nodecl
#endif // TL_NODECL_FWD_HPP
