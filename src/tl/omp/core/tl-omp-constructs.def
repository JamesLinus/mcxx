// These macros are defined in several places to automatically generate all OpenMP support
// 
// OMP_CONSTRUCT(pragma_directive, id, predicate)
//    * pragma_directive is a string | separated for compound directive names used when registering the construct
//    * id an identifier used to build names
//    * predicate is used to filter between languages: all languages "true"
//
// - OMP_DIRECTIVE is the same as OMP_CONSTRUCT but for directives
// - OMP_CONSTRUCT_NOEND is the same as OMP_CONSTRUCT but *only* for Fortran constructs 
// In Fortran every OMP_CONSTRUCT("x", x) will require the user write
// 
//   $!SENTINEL X <clauses-opt>
//      <block-opt>
//   $!SENTINEL END X <clauses-opt>
// 
// But sometimes it may be convenient to have something like this
// 
//   $!SENTINEL X <clauses-opt>
//     only-one-statement (probably a construct)
//   [$!SENTINEL END X <clauses-opt>]         <-- optional
// 
// OMP_SECTIONS is special
// 

OMP_CONSTRUCT("parallel", parallel, true)

OMP_CONSTRUCT("parallel|for", parallel_for, IS_CXX_LANGUAGE || IS_C_LANGUAGE)
OMP_CONSTRUCT("for", for, IS_CXX_LANGUAGE || IS_C_LANGUAGE)

OMP_DIRECTIVE("barrier", barrier, true)
OMP_CONSTRUCT_NOEND("atomic", atomic, true)
OMP_CONSTRUCT("master", master, true)

OMP_CONSTRUCT("critical", critical, true)
OMP_DIRECTIVE("flush", flush, true)

OMP_CONSTRUCT("single", single, true)

OMP_CONSTRUCT("parallel|sections", parallel_sections, true)
OMP_CONSTRUCT("sections", sections, true)

// section is closer to a construct but it cannot be handled as such
OMP_DIRECTIVE("section", section, true)

OMP_CONSTRUCT("task", task, true)
OMP_DIRECTIVE("taskwait", taskwait, true)

OMP_DIRECTIVE("taskyield", taskyield, true)

OMP_DIRECTIVE("threadprivate", threadprivate, true)

OMP_CONSTRUCT("ordered", ordered, true)

OMP_DIRECTIVE("declare|reduction", declare_reduction, true)

OMP_CONSTRUCT_NOEND("target", target, true)

OMP_CONSTRUCT_NOEND("parallel|do", parallel_do, IS_FORTRAN_LANGUAGE)
OMP_CONSTRUCT_NOEND("do", do, IS_FORTRAN_LANGUAGE)
