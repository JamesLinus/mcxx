# Syntax
#
#   rule : another-rule
#        | NODECL_TREE_CONSTRUCTOR([child_name] rule-name, ...) options
#
#
# Up to 4 children, [child_name] is mandatory and must be a valid C/C++/Fortran name
#
# options is a blank-separated sequence of the following. Each option-name declares extra
# information that is mandatory to the tree (i.e. it cannot be NULL). 
#
#    option-name               frontend type
#        symbol                    scope_entry_t*
#        type                      type_t*
#        text                      const char*
#        const_value               const_value_t*
#        template-parameters       template_parameter_list_t*
#
# The order that appears here is the order in which this extra information is
# passed (regardless of the precise syntax of the rule, i.e. 'symbol' is always
# considered before 'type')
#
# There is a special rule 'nodecl' which is the root of the whole hierarchy,
# while not enforced every rule should be referenced in another rule. The
# structure must be nonambiguous (i.e. there must be a single way of
# constructing a given hierarchy)
#

nodecl : NODECL_TOP_LEVEL([top_level] top-level-seq-opt)
top-level : function-code 
          | object-init
          | builtin-decl
          | pragma-directive

name : NODECL_SYMBOL() symbol
type : NODECL_TYPE() type

function-code : NODECL_FUNCTION_CODE([statements]statement-seq, [initializers]object-init-seq-opt, [internal_functions]function-code-seq-opt) symbol
object-init : NODECL_OBJECT_INIT([init_expr]expression-opt) symbol

statement : statement-but-object-init
          | object-init

statement-but-object-init: NODECL_EMPTY_STATEMENT()
          | NODECL_EXPRESSION_STATEMENT([nest]expression)
          | compound-statement
          | NODECL_DO_STATEMENT([statement]statement-seq, [condition]expression)
          | NODECL_WHILE_STATEMENT([condition]expression, [statement]statement-seq) symbol
          | NODECL_FOR_STATEMENT([loop_header]loop-control, [statement]statement-seq) symbol
          | NODECL_IF_ELSE_STATEMENT([condition]expression, [then]statement-seq, [else]statement-seq-opt) symbol
          | NODECL_LABELED_STATEMENT([statement]statement-seq) symbol
          | NODECL_SWITCH_STATEMENT([switch]expression, [statement]statement-seq)
          | NODECL_DEFAULT_STATEMENT([statement]statement-seq)
          | NODECL_CASE_STATEMENT([case]case-expression-seq, [statement]statement-seq)
          | NODECL_BREAK_STATEMENT()
          | NODECL_CONTINUE_STATEMENT()
          | NODECL_GOTO_STATEMENT() symbol
          | NODECL_RETURN_STATEMENT([value]expression-opt)
          | pragma-directive
          | pragma-construct
          | c-cxx-only-statements
          | fortran-only-statements
          | builtin-decl

compound-statement : NODECL_COMPOUND_STATEMENT([statements]statement-seq-opt, [finally]statement-seq-opt) symbol

case-expression : expression
                | subscript-triplet

builtin-decl: NODECL_BUILTIN_DECL([components]any-list-opt) text
builtin-expr: NODECL_BUILTIN_EXPR([components]any-list-opt) text type
            | NODECL_TEXT() text

any-list: NODECL_ANY_LIST([list]any-seq-opt)

any : statement-but-object-init
    | expression
    | any-list
    | type

loop-control: NODECL_LOOP_CONTROL([init]expression-opt, [cond]expression-opt, [next]expression-opt)

pragma-directive: NODECL_PRAGMA_CUSTOM_DIRECTIVE([pragma_line]pragma-line) text
pragma-line: NODECL_PRAGMA_CUSTOM_LINE([parameters]pragma-clause-arg-seq-opt, [clauses]pragma-custom-clause-seq-opt) text
pragma-custom-clause: NODECL_PRAGMA_CUSTOM_CLAUSE([arguments]pragma-clause-arg-seq-opt) text
pragma-clause-arg: NODECL_PRAGMA_CLAUSE_ARG() text
pragma-construct : NODECL_PRAGMA_CUSTOM_CONSTRUCT([pragma_line]pragma-line, [statement]statement-seq) text

c-cxx-only-statements : NODECL_TRY_BLOCK([statement]statement-seq, [catch_handlers]catch-handler-seq-opt, [any]statement-seq-opt)

catch-handler : NODECL_CATCH_HANDLER([name]object-init-opt, [statement]statement-seq) type

literal : NODECL_INTEGER_LITERAL() type const_value
    | NODECL_FLOATING_LITERAL() type const_value
    | NODECL_COMPLEX_LITERAL([real]expression, [imag]expression) type
    | NODECL_BOOLEAN_LITERAL() type const_value
    | string-literal
    | structured-value

string-literal: NODECL_STRING_LITERAL() type const_value
 
expression : literal
           | name
           | NODECL_FUNCTION_CALL([called] expression, [arguments] argument-seq-opt) type
           | NODECL_ARRAY_SUBSCRIPT([subscripted] expression, [subscripts]subscript-seq) type
           | NODECL_ARRAY_SECTION([subscripted] expression, [lower] expression, [upper] expression) type
           | NODECL_CLASS_MEMBER_ACCESS([lhs]expression, [member]name) type
           | NODECL_PLUS([rhs]expression) type
           | NODECL_NEG([rhs]expression) type
           | NODECL_MUL([lhs]expression, [rhs]expression) type
           | NODECL_POWER([lhs]expression, [rhs]expression) type
           | NODECL_DIV([lhs]expression, [rhs]expression) type
           | NODECL_MOD([lhs]expression, [rhs]expression) type
           | NODECL_ADD([lhs]expression, [rhs]expression) type
           | NODECL_MINUS([lhs]expression, [rhs]expression) type
           | NODECL_CONCAT([lhs]expression, [rhs]expression) type
           | NODECL_EQUAL([lhs]expression, [rhs]expression) type
           | NODECL_DIFFERENT([lhs]expression, [rhs]expression) type
           | NODECL_LOWER_THAN([lhs]expression, [rhs]expression) type
           | NODECL_LOWER_OR_EQUAL_THAN([lhs]expression, [rhs]expression) type
           | NODECL_GREATER_THAN([lhs]expression, [rhs]expression) type
           | NODECL_GREATER_OR_EQUAL_THAN([lhs]expression, [rhs]expression) type
           | NODECL_LOGICAL_NOT([rhs]expression) type
           | NODECL_LOGICAL_AND([lhs] expression, [rhs] expression) type
           | NODECL_LOGICAL_OR([lhs] expression, [rhs] expression) type
           | NODECL_BITWISE_NOT([rhs]expression) type
           | NODECL_BITWISE_AND([lhs] expression, [rhs] expression) type
           | NODECL_BITWISE_OR([lhs] expression, [rhs] expression) type
           | NODECL_BITWISE_XOR([lhs] expression, [rhs] expression) type
           | NODECL_SHL([lhs] expression, [rhs] expression) type
           | NODECL_SHR([lhs] expression, [rhs] expression) type
           | NODECL_ASSIGNMENT([lhs] expression, [rhs] expression) type
           | NODECL_PARENTHESIZED_EXPRESSION([nest]expression) type
           | NODECL_DERREFERENCE([rhs]expression) type
           | NODECL_CAST([rhs]expression) type text
           | NODECL_COMPOUND_EXPRESSION([nest]compound-statement) type
           | c-cxx-expressions
           | fortran-expressions
           | object-init
           | builtin-expr
# This one is intended to represent implicit conversions allowed by the base language
           | NODECL_CONVERSION([nest] expression) type
           | NODECL_ERR_EXPR()

structured-value: NODECL_STRUCTURED_VALUE([items]initializer-item-seq-opt) type

initializer-item: NODECL_FIELD_DESIGNATOR([field]name, [next]initializer-item)
          | NODECL_INDEX_DESIGNATOR([index]expression, [next]initializer-item)
          | expression
          | fortran-implied-do

fortran-implied-do: NODECL_FORTRAN_IMPLIED_DO([symbol]name, [range]subscript-triplet, [items]initializer-item-seq)

argument : named-pair
         | expression
         | alt-return

named-pair: NODECL_FORTRAN_NAMED_PAIR_SPEC([name]name-opt, [argument]expression)

alt-return: NODECL_FORTRAN_ALT_RETURN()

subscript : expression
          | subscript-triplet

subscript-triplet : NODECL_SUBSCRIPT_TRIPLET([lower]expression-opt, [upper]expression-opt, [stride]expression-opt)

c-cxx-expressions : NODECL_CONDITIONAL_EXPRESSION([condition]expression, [true]expression, [false]expression) type
                  | NODECL_REFERENCE([rhs]expression) type
                  | NODECL_COMMA([rhs]expression, [lhs]expression) type
                  | NODECL_THROW([rhs]expression-opt) type
                  | NODECL_VIRTUAL_FUNCTION_CALL([called] expression, [arguments] argument-seq) type
                  | NODECL_MUL_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_DIV_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_ADD_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_SUB_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_SHL_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_SHR_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_BITWISE_AND_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_BITWISE_OR_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_BITWISE_XOR_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_MOD_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_PREINCREMENT([rhs]expression) type
                  | NODECL_POSTINCREMENT([rhs]expression) type
                  | NODECL_PREDECREMENT([rhs]expression) type
                  | NODECL_POSTDECREMENT([rhs]expression) type
                  | NODECL_SIZEOF([size_type]type) type
                  | NODECL_ALIGNOF([size_type]type) type
                  | NODECL_OFFSET([base]expression, [offset]expression) type
                  | NODECL_TYPEID([arg]type-or-expr) type
                  | NODECL_NEW([init]expression-opt, [placement]expression-seq-opt, [alloc_func]name-opt) type text
                  | NODECL_DELETE([rhs]expression) type
                  | NODECL_DELETE_ARRAY([rhs]expression) type
                  | NODECL_POINTER_TO_MEMBER() symbol
                  | NODECL_REAL_PART([rhs]expression) type
                  | NODECL_IMAG_PART([rhs]expression) type
                  | NODECL_OFFSETOF([type]type, [designator]cxx-dependent-initializer-seq) type
                  | NODECL_SHAPING([postfix] expression, [shape] expression-seq) type
                  | cxx-dependent-nodecls
                  | cuda-expressions

# This is only for dependent parts of C++. These nodecls exist because
# usual nodecls may not retain enough semantic information for a successful
# instantiation. These nodecls should never appear in the code (but may be accessible
# through symbols for instantiation purposes)
cxx-dependent-nodecls: cxx-dependent-name
   | cxx-dependent-initializer
   | cxx-dependent-expressions

# Special nodes for dependent names
cxx-dependent-name : NODECL_CXX_DEP_GLOBAL_NAME_NESTED([items] cxx-atom-dependent-name-seq)
                   | NODECL_CXX_DEP_NAME_NESTED([items] cxx-atom-dependent-name-seq)
cxx-atom-dependent-name : cxx-simple-name
                   | NODECL_CXX_DEP_TEMPLATE_ID([name]cxx-atom-dependent-name) template-parameters
                   | NODECL_CXX_DEP_NAME_CONVERSION() 

cxx-simple-name: NODECL_CXX_DEP_NAME_SIMPLE() text

cxx-dependent-initializer : NODECL_CXX_BRACED_INITIALIZER([init]expression-seq-opt)
    | NODECL_CXX_EQUAL_INITIALIZER([init]expression)
    | NODECL_CXX_PARENTHESIZED_INITIALIZER([init]expression-seq-opt)
    | NODECL_C99_DESIGNATED_INITIALIZER([designation]cxx-dependent-initializer-seq, [init]expression)
    | NODECL_C99_FIELD_DESIGNATOR([name]cxx-simple-name)
    | NODECL_C99_INDEX_DESIGNATOR([expr]expression) 

cxx-dependent-expressions: NODECL_CXX_EXPLICIT_TYPE_CONVERSION([args]expression-seq-opt) type
# a->b
    | NODECL_CXX_ARROW([lhs]expression, [member]name) type
# a.*b
    | NODECL_CXX_DOT_PTR_MEMBER([lhs]expression, [ptr]expression) type
# a->*b
    | NODECL_CXX_ARROW_PTR_MEMBER([lhs]expression, [ptr]expression) type
# sizeof(expr)
    | NODECL_CXX_SIZEOF([expr] expression) type
# alignof(expr)
    | NODECL_CXX_ALIGNOF([expr] expression) type
# a.T::~T
    | NODECL_CXX_DOT_PSEUDO_DESTRUCTOR([postfix]expression) type
# a->T::~T
    | NODECL_CXX_ARROW_PSEUDO_DESTRUCTOR([postfix]expression) type
# (type) { ... }
    | NODECL_CXX_POSTFIX_INITIALIZER([postfix]expression) type
# a[e:e]
    | NODECL_CXX_ARRAY_SECTION_RANGE([postfix] expression, [lower] expression-opt, [upper] expression-opt]) type
# a[e;e]
    | NODECL_CXX_ARRAY_SECTION_SIZE([postfix] expression, [start] expression-opt, [num_items] expression-opt]) type

cuda-expressions : NODECL_CUDA_KERNEL_CALL([kernel_config] expression-seq, [function_call] expression) type

type-or-expr : type
             | expression

fortran-only-statements : NODECL_FORTRAN_ALLOCATE_STATEMENT([items]expression-seq, [options]fortran-io-spec-seq-opt)
                        | NODECL_FORTRAN_ARITHMETIC_IF_STATEMENT([expr]expression, [lower]name, [equal]name, [upper]name)
                        | NODECL_FORTRAN_ASSIGNED_GOTO_STATEMENT([index]name, [label_seq]name-seq)
                        | NODECL_FORTRAN_OPEN_STATEMENT([io_items] fortran-io-spec-seq-opt)
                        | NODECL_FORTRAN_CLOSE_STATEMENT([io_items] fortran-io-spec-seq-opt)
                        | NODECL_FORTRAN_COMPUTED_GOTO_STATEMENT([label_seq]name-seq, [index] expression)
                        | NODECL_FORTRAN_DEALLOCATE_STATEMENT([items]expression-seq, [options]fortran-io-spec-seq-opt)
                        | NODECL_FORTRAN_IO_STATEMENT([io_spec_list]fortran-io-spec-seq-opt, [io_items]fortran-io-item-seq-opt) text
                        | NODECL_FORTRAN_LABEL_ASSIGN_STATEMENT([label_var]name, [value]expression)
                        | NODECL_FORTRAN_NULLIFY_STATEMENT([items]expression-seq)
                        | NODECL_FORTRAN_PRINT_STATEMENT([format] expression, [io_items]fortran-io-item-seq-opt)
                        | NODECL_FORTRAN_READ_STATEMENT([io_spec_list]fortran-io-spec-seq-opt, [io_items]fortran-io-item-seq-opt)
                        | NODECL_FORTRAN_WRITE_STATEMENT([io_spec_list]fortran-io-spec-seq-opt, [io_items]fortran-io-item-seq-opt)
                        | NODECL_FORTRAN_STOP_STATEMENT([stop_code]expression-opt)
                        | NODECL_FORTRAN_WHERE([where_set] where-pair-seq)
                        | NODECL_FORTRAN_FORALL([loop_control] loop-control-seq, [mask] expression-opt, [statement] statement-seq)

where-pair: NODECL_FORTRAN_WHERE_PAIR([mask] expression-opt, [statement] statement-seq)

# NODECL_FORTRAN_DATA
#   This is used only for .data variable which holds the initializations by means
#   of DATA statements
# NODECL_FORTRAN_EQUIVALENCE
#   This is used only for .equivalence variable which holds the equivalence of
#   data storage
fortran-expressions : NODECL_FORTRAN_DATA([objects]fortran-data-item-seq, [values]fortran-data-item-seq)
                    | NODECL_FORTRAN_EQUIVALENCE([first]expression, [second]expression-seq)

fortran-data-item : expression
                  | fortran-implied-do

fortran-io-spec: NODECL_FORTRAN_IO_SPEC([value]expression-opt) text

fortran-io-item : expression
           | fortran-implied-do

