nodecl : NODECL_TOP_LEVEL([top_level] top-level-seq-opt)
top-level : function-code 
          | object-init
          | builtin-decl
          | pragma-directive

name : NODECL_SYMBOL() symbol
type : NODECL_TYPE() type

function-code : NODECL_FUNCTION_CODE([statements]statement-seq, [internal_functions]function-code-opt) symbol
object-init : NODECL_OBJECT_INIT() symbol

statement : statement-but-object-init
          | object-init

statement-but-object-init: NODECL_EMPTY_STATEMENT()
          | NODECL_EXPRESSION_STATEMENT([nest]expression)
          | NODECL_COMPOUND_STATEMENT([statements]statement-seq-opt, [finally]statement-seq-opt) symbol
          | NODECL_DO_STATEMENT([statement]statement, [condition]expression)
          | NODECL_WHILE_STATEMENT([condition]expression, [statement]statement) symbol
          | NODECL_FOR_STATEMENT([loop_header]loop-control, [statement]statement) symbol
          | NODECL_IF_ELSE_STATEMENT([condition]expression, [then]statement, [else]statement-opt) symbol
          | NODECL_LABELED_STATEMENT([statement]statement) symbol
          | NODECL_SWITCH_STATEMENT([switch]expression, [statement]statement)
          | NODECL_DEFAULT_STATEMENT([statement]statement)
          | NODECL_CASE_STATEMENT([case]expression, [statement]statement)
          | NODECL_BREAK_STATEMENT()
          | NODECL_CONTINUE_STATEMENT()
          | NODECL_GOTO_STATEMENT() symbol
          | NODECL_RETURN_STATEMENT([value]expression))
          | pragma-directive
          | pragma-construct
          | c-cxx-only-statements
          | fortran-only-statements
          | builtin-decl

builtin-decl: NODECL_BUILTIN_DECL([components]any-list-opt) text
builtin-expr: NODECL_BUILTIN_EXPR([components]any-list-opt) text

any-list: NODECL_ANY_LIST([list]any-seq-opt)

any : statement-but-object-init
    | expression
    | any-list
    | type

loop-control: NODECL_LOOP_CONTROL([init]expression-opt, [cond]expression-opt, [next]expression-opt)

pragma-directive: NODECL_PRAGMA_CUSTOM_DIRECTIVE([pragma_line]pragma-line) text
pragma-line: NODECL_PRAGMA_CUSTOM_LINE([parameters]pragma-clause-arg-seq-opt, [clauses]pragma-custom-clause-seq-opt) text
pragma-custom-clause: NODECL_PRAGMA_CUSTOM_CLAUSE([arguments]pragma-clause-arg-seq-opt) text
pragma-clause-arg: NODECL_PRAGMA_CLAUSE_ARG() text
pragma-construct : NODECL_PRAGMA_CUSTOM_CONSTRUCT([pragma_line]pragma-line, [statement]statement) text

c-cxx-only-statements : NODECL_TRY_BLOCK([statement]statement, [catch_handlers]catch-handler-seq, [any]statement-opt)

catch-handler : NODECL_CATCH_HANDLER([name]object-init-opt, [statement]statement) type

# FIXME - Document these. Some of them could be simplified further
fortran-only-statements : NODECL_ALLOCATE_STATEMENT()
                        | NODECL_ARITHMETIC_IF_STATEMENT()
                        | NODECL_ASSIGNED_GOTO_STATEMENT()
                        | NODECL_CLOSE_STATEMENT()
                        | NODECL_COMPUTED_GOTO_STATEMENT()
                        | NODECL_DEALLOCATE_STATEMENT()
                        | NODECL_IO_STATEMENT()
                        | NODECL_LABEL_ASSIGN_STATEMENT()
                        | NODECL_NULLIFY_STATEMENT()
                        | NODECL_OPEN_STATEMENT()
                        | NODECL_PRINT_STATEMENT()
                        | NODECL_READ_STATEMENT()
                        | NODECL_STOP_STATEMENT()
                        | NODECL_PAUSE_STATEMENT()
                        | NODECL_WRITE_STATEMENT()

literal : NODECL_INTEGER_LITERAL() type const_value
    | NODECL_FLOATING_LITERAL() type text
    | NODECL_COMPLEX_LITERAL([real]expression, [imag]expression) type
    | NODECL_BOOLEAN_LITERAL() type const_value
    | string-literal
    | structured-literal

string-literal: NODECL_STRING_LITERAL() type text
 
expression : literal
           | name
           | NODECL_FUNCTION_CALL([called] expression, [arguments] argument-seq-opt) type
           | NODECL_ARRAY_SUBSCRIPT([subscripted] expression, [subscripts]subscript-seq) type
           | NODECL_CLASS_MEMBER_ACCESS([lhs]expression, [member]name) type
           | NODECL_PLUS([rhs]expression) type
           | NODECL_NEG([rhs]expression) type
           | NODECL_MUL([lhs]expression, [rhs]expression) type
           | NODECL_POWER([lsh]expression, [rhs]expression) type
           | NODECL_DIV([lhs]expression, [rhs]expression) type
           | NODECL_MOD([lhs]expression, [rhs]expression) type
           | NODECL_ADD([lhs]expression, [rhs]expression) type
           | NODECL_MINUS([lhs]expression, [rhs]expression) type
           | NODECL_CONCAT([lhs]expression, [rhs]expression) type
           | NODECL_EQUAL([lhs]expression, [rhs]expression) type
           | NODECL_DIFFERENT([lhs]expression, [rhs]expression) type
           | NODECL_LOWER_THAN([lhs]expression, [rhs]expression) type
           | NODECL_LOWER_OR_EQUAL_THAN([lhs]expression, [rhs]expression) type
           | NODECL_GREATER_THAN([lhs]expression, [rhs]expression) type
           | NODECL_GREATER_OR_EQUAL_THAN([lhs]expression, [rhs]expression) type
           | NODECL_LOGICAL_NOT([rhs]expression) type
           | NODECL_LOGICAL_AND([lhs] expression, [rhs] expression) type
           | NODECL_LOGICAL_OR([lhs] expression, [rhs] expression) type
           | NODECL_BITWISE_NOT([rhs]expression) type
           | NODECL_BITWISE_AND([lhs] expression, [rhs] expression) type
           | NODECL_BITWISE_OR([lhs] expression, [rhs] expression) type
           | NODECL_BITWISE_XOR([lhs] expression, [rhs] expression) type
           | NODECL_SHL([lhs] expression, [rhs] expression) type
           | NODECL_SHR([lhs] expression, [rhs] expression) type
           | NODECL_ASSIGNMENT([lhs] expression, [rhs] expression) type
           | NODECL_PARENTHESIZED_EXPRESSION([nest]expression) type
           | NODECL_DERREFERENCE([rhs]expression) type
           | NODECL_CAST([rhs]expression) type text
           | c-cxx-expressions
           | object-init
           | builtin-expr

structured-literal: NODECL_STRUCTURED_LITERAL([items]initializer-item-seq-opt) type

initializer-item: NODECL_FIELD_DESIGNATOR([field]name, [next]initializer-item)
          | NODECL_INDEX_DESIGNATOR([index]expression, [next]initializer-item)
          | expression

argument : NODECL_NAMED_PAIR_SPEC([name]name-opt, [argument]expression)
         | expression

subscript : expression
          | NODECL_SUBSCRIPT_TRIPLET([lower]expression-opt, [upper]expression-opt, [stride]expression-opt)

c-cxx-expressions : NODECL_CONDITIONAL_EXPRESSION([condition]expression, [true]expression, [false]expression) type
                  | NODECL_REFERENCE([rhs]expression) type
                  | NODECL_COMMA([rhs]expression, [lhs]expression) type
                  | NODECL_THROW([rhs]expression) type
                  | NODECL_VIRTUAL_FUNCTION_CALL([called] expression, [arguments] argument-seq) type
                  | NODECL_MUL_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_DIV_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_ADD_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_SUB_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_SHL_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_SHR_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_BITWISE_AND_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_BITWISE_OR_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_BITWISE_XOR_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_MOD_ASSIGNMENT([lhs] expression, [rhs] expression) type
                  | NODECL_PREINCREMENT([rhs]expression) type
                  | NODECL_POSTINCREMENT([rhs]expression) type
                  | NODECL_PREDECREMENT([rhs]expression) type
                  | NODECL_POSTDECREMENT([rhs]expression) type
                  | NODECL_SIZEOF([type]type) type
                  | NODECL_OFFSET([base]expression, [offset]expression) type
                  | NODECL_TYPEID([arg]type-or-expr) type
                  | NODECL_NEW([init]expression-opt, [placement]expression-seq-opt) type
                  | NODECL_DELETE([rhs]expression) type
                  | NODECL_DELETE_ARRAY([rhs]expression) type

type-or-expr : type
             | expression
